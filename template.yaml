Description:  This template to deploy path-based routing application with ALB and NLB to fix IP addresses

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    AllowedPattern: "^([a-z0-9]|-)+$"
    ConstraintDescription: "Must be lowercases, numbers or hyphens"
    Type: String
  
  AppImageUrl:
    Description: Please enter the URL of application container image
    Type: String

Resources:
  ###########
  # Network #
  ###########
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "load-balancer-ingress-sg"
      GroupDescription: "Security group for load balancer"
      SecurityGroupIngress:
        - Description: HTTP
          CidrIp: 10.0.0.0/16
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC

  ###############
  # ECS Cluster #
  ###############
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub ${EnvironmentName}-ecs-cluster

  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${EnvironmentName}-ecs-task-securitygroup
      GroupDescription: "Security group for ecs tasks"
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          Description: outbound full open
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress: 
        - Description: HTTP traffic from load balancer
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: Role for ECS task execution
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      RoleName: !Sub ${EnvironmentName}-ecs-task-execution-role

  ECSDefaultTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions:
        - Essential: true
          Image: !Ref AppImageUrl
          Name: !Sub ${EnvironmentName}-default-app
          PortMappings: 
            - ContainerPort: 80
      Cpu: 256
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Memory: 512
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX

  ECSDefaultService:
    Type: AWS::ECS::Service
    DependsOn:
      - DefaultListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-default-app
          ContainerPort: 80
          TargetGroupArn: !Ref DefaultTargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      SchedulingStrategy: REPLICA
      ServiceName: !Sub ${EnvironmentName}-default-service
      TaskDefinition: !Ref ECSDefaultTaskDefinition

  ECSApp1TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions:
        - Essential: true
          Image: !Ref AppImageUrl
          Name: !Sub ${EnvironmentName}-app-1
          PortMappings: 
            - ContainerPort: 80
          Environment:
            - Name: APP_NAME
              Value: "app1"
      Cpu: 256
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Memory: 512
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX

  ECSApp1Service:
    Type: AWS::ECS::Service
    DependsOn:
      - App2ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-app-1
          ContainerPort: 80
          TargetGroupArn: !Ref App1TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      SchedulingStrategy: REPLICA
      ServiceName: !Sub ${EnvironmentName}-app-1-service
      TaskDefinition: !Ref ECSApp1TaskDefinition

  ECSApp2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions:
        - Essential: true
          Image: !Ref AppImageUrl
          Name: !Sub ${EnvironmentName}-app-2
          PortMappings: 
            - ContainerPort: 80
          Environment:
            - Name: APP_NAME
              Value: "app2"
      Cpu: 256
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Memory: 512
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX

  ECSApp2Service:
    Type: AWS::ECS::Service
    DependsOn:
      - App2ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-app-2
          ContainerPort: 80
          TargetGroupArn: !Ref App2TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      SchedulingStrategy: REPLICA
      ServiceName: !Sub ${EnvironmentName}-app-2-service
      TaskDefinition: !Ref ECSApp2TaskDefinition

  App2ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - TargetGroupArn: !Ref App2TargetGroup
          Type: forward
          Order: 1
      Conditions: 
        - Field: path-pattern
          PathPatternConfig: 
            Values:
              - "/app2*"
      ListenerArn: !Ref DefaultListener
      Priority: 1020

  #################
  # Load Balancer #
  #################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internal
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} LoadBalancer
      Type: application

  DefaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref DefaultTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Name: !Sub ${EnvironmentName}-default-target-group
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  App1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /app1/
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Name: !Sub ${EnvironmentName}-app-1-target-group
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  App2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /app2/
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Name: !Sub ${EnvironmentName}-app-2-target-group
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  App1ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - TargetGroupArn: !Ref App1TargetGroup
          Type: forward
          Order: 1
      Conditions: 
        - Field: path-pattern
          PathPatternConfig: 
            Values:
              - "/app1*"
      ListenerArn: !Ref DefaultListener
      Priority: 1010

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${EnvironmentName}-nlb
      Scheme: internal
      SubnetMappings: 
        - SubnetId: !Ref PublicSubnet1
          PrivateIPv4Address: 10.0.10.30
        - SubnetId: !Ref PublicSubnet2
          PrivateIPv4Address: 10.0.11.30
      Type: network

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Name: !Sub ${EnvironmentName}-alb-target-group
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref ALB
      TargetType: alb
      VpcId: !Ref VPC
  
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Order: 1
          TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP